MANAGE=  # manage脚本
INIT_DB= # 数据库初始化脚本
SERVER=  # 服务器类型

# 切换目录
OLD_DIR="$(pwd)"
DIR="$(cd "$(dirname "$0")" && pwd)"

cd $DIR

RETVAL=0
_start() {
    name=$2
    args=$3
    log=$4
    pidfile="pid_$1.pid"

    echo -n $"Starting $name .............."
    if [ -f $pidfile ]; then
        echo -e "\t\E[31;40m[FAIL]\033[0m"
        echo "$name is Running"
    else
        node $name $args $log 1>/dev/null &
        for i in {1..5}; do
            if [ -f $pidfile ]; then
                echo -e "\t\E[32;40m[OK]\033[0m"
                break
            else
                if [ $i -eq 5 ]; then
                    echo -e "\t\E[31;40m[FAIL]\033[0m"
                fi
            fi
            sleep 1
        done
    fi
    RETVAL=$?
}

_stop() {
    name=$2
    pidfile="pid_$1.pid"

    echo -n $"Stopping $name .............."
    if [ -f ${pidfile} ]; then
        pid=$(cat ${pidfile})
        if [ -d "/proc/${pid}" ]; then
            while [ -d "/proc/${pid}" ]; do
                kill ${pid}
                sleep 1
            done
        fi
        rm -f ${pidfile}
    fi
    echo -e "\t\E[32;40m[OK]\033[0m"
    RETVAL=$?
}

_status() {
    name=$2
    pidfile="pid_$1.pid"

    echo -n -e "$name\t\t"
    if [ -f ${pidfile} ]; then
        pid=$(cat ${pidfile})
        echo -n -e "$pid\t\t"
        if [ -d "/proc/${pid}" ]; then
            echo -n -e "\E[32;40m[Running]\033[0m\t"
        else
            echo -n -e "\E[31;40m[Lost]\033[0m\t"
        fi

        echo $(ps -p $pid -o rss | tail -n 1 | awk '{printf("%.2fM", $1/1024)}')
    else
        echo -e "-\t\t\E[31;40m[Stoped]\033[0m\t-"
    fi

    RETVAL=$?
}

start() {
    SERVER=$3
    CONFIG=$4
    if [ "$1" == "game" ]; then
        _start "gateway_$2" './gateway/gateway.js' $CONFIG ../log/gateway_$2/arena.log
        #配置gm中用到的phphost
        phpHost=$(grep "exports.PHPHost" $CONFIG | awk '{print $3}')
        sed -i "/phpHost/c var phpHost = $phpHost" web/global.js

        gameIdBegin=$(grep exports.GameIdBegin $CONFIG | awk -F'[ ;]' '{print $3}')
        gameCount=$(grep exports.GameCount $CONFIG | awk -F'[ ;]' '{print $3}')
        for ((c = 0; c < $gameCount; c++)); do
            ((d = gameIdBegin + c))

            _start "game_$2_$d" "./game/game.js $d" $CONFIG ../log/game_$2_$d/arena.log
        done

        _start "world_$2" './world/world.js' $CONFIG ../log/world_$2/arena.log

        _start "wss_$2" './wss/wss.js' $CONFIG ../log/wss_$2/arena.log

        _start "logserver_$2" './logserver/logserver.js' $CONFIG ../log/logserver_$2/arena.log
    else
        _start "$1_$2" $SERVER $CONFIG ../log/$1_$2/arena.log
    fi
}

stop() {
    # echo call params[ $1, $2, $3, $4]
    if [ "$1" == "game" ]
    then
        CONFIG="../config_$1_$2"
        if [ ! -f $CONFIG ]
        then
            # echo server $1 id [$2] error
            return
        fi

        _stop "gateway_$2"

        gameIdBegin=$(grep exports.GameIdBegin $CONFIG | awk -F'[ ;]' '{print $3}')
        gameCount=$(grep exports.GameCount $CONFIG | awk -F'[ ;]' '{print $3}')
        for ((c = 0; c < $gameCount; c++)); do
            ((d = gameIdBegin + c))
            _stop "game_$2_$d"
        done

        _stop "world_$2"
        _stop "wss_$2"
        _stop "logserver_$2"
    else
    echo call stop 1
        _stop "$1_$2"
    echo call stop 2
    fi
    
}

status() {
    if [ "$1" == "game" ]
    then
        CONFIG="../config_$1_$2"
        if [ ! -f $CONFIG ]
        then
            echo server $1 id [$2] config error
            return
        fi

        echo -e "Version: $(git log | head -n 1 | awk '{print $2}')"
        echo "------------------------------------------------------"
        echo -e "Process\t\tPID\\t\tStatus\t\tMem"

        _status "gateway_$2"

        gameIdBegin=$(grep exports.GameIdBegin $CONFIG | awk -F'[ ;]' '{print $3}')
        gameCount=$(grep exports.GameCount $CONFIG | awk -F'[ ;]' '{print $3}')
        for ((c = 0; c < $gameCount; c++)); do
            ((d = gameIdBegin + c))
            _status "game_$2_$d"
        done

        _status "world_$2"
        _status "wss_$2"
        _status "logserver_$2"
    else
        _status "$1_$2"
    fi
}

case_start() {
    # echo call params[ $1, $2, $3]
    if [ "$3" == "update" ]; then
        git reset --hard HEAD >/dev/null 2>&1
        git clean -fd >/dev/null 2>&1
        git pull >/dev/null 2>&1
    fi

    CONFIG="../config_$1_$2"
    if [ ! -f $CONFIG ]
    then
        echo server $1 id [$2] config error
        return
    fi

    SERVER="./$1/$1.js"
    INIT_DB="./init_db/init_$1_db.js"
    echo $SERVER $INIT_DB

    node $INIT_DB >/dev/null
    if [ $? -eq 0 ]; then
        if [ ! -e "./log"]; then
            sh mkdir ./log
        fi

        if [ ! -e "./log/$1_$2"]; then
            sh mkdir ./log/$1_$2
        fi

        start $1 $2 $SERVER $CONFIG
        # node $SERVER $CONFIG 1>/dev/null &
    else
        echo "init $1 db error"
    fi
}

# echo params[$1, $2, $3, $4, $5, $6]

if [ -z "$1" ]; then
    echo $"Usage: manage {start|stop|status}"
    exit 1
fi

if [ -z "$2" ]; then
    echo $"Usage: manage $1 [server_name] [server_id]"
    exit 1
fi

if [ -z "$3" ]; then
    echo $"Usage: manage $1 $2 [server_id]"
    exit 1
fi

case "$1" in
start)
    stop $2 $3 $4 $5 $6 $7 $8 $9
    sleep 1
    case_start $2 $3 $4 $5 $6 $7 $8 $9
    ;;
stop)
    stop $2 $3 $4 $5 $6 $7 $8 $9
    ;;
status)
    status $2 $3 $4 $5 $6 $7 $8 $9
    ;;
*)
    echo $"Usage: manage {start|stop|status}"
    exit 1
    ;;
esac

# 还原目录
cd $OLD_DIR

exit $RETVAL
